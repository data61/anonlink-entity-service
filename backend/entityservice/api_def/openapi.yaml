# An OpenAPI 3.0 definition of the Entity Service API.
#
# This is used for generating API documentation and the types used by the
# server.
#
# Some style notes:
# - This file is used by ReDoc, which allows GitHub Flavored Markdown in
#   descriptions.
openapi: 3.0.0
info:
  version: '1.13'
  title: Entity Matching API
  x-logo:
    url: http://clkhash.readthedocs.io/en/latest/_static/logo.svg
  contact:
    name: 'Confidential Computing, Data61 | CSIRO'
    email: confidential-computing@csiro.au
    url: https://github.com/data61/anonlink-entity-service

  description: >-
    Allows multiple organisations to carry out private record linkage -
    without disclosing personally identifiable information.

    In general:

    * All parameters and returned objects are JSON with content-type set to
    `"application/json"`.

    * All authentication tokens are 48 character hex strings.

    * The `Project`/`Run` resource identifiers are also 48 char hex strings.

    * HTTP status codes are used to distinguish server outcomes.


    **Note:** Several important concepts including security considerations are described in
    [separate documentation](./concepts.html).

    ### Introduction

    This is a service that computes matches of entity records between two parties.
    The personally identifiable information used for linking is first locally transformed
    to anonymous linking codes called [Cryptographic Longterm Keys](concepts.html#cryptographic-longterm-key)
    (CLKs). Each party then uploads its CLKs to the service for matching.
    The service supports three different [types of outputs](concepts.html#result-types)
    of matching results, varying in privacy properties.
    For the CLKs to be comparable, the parties need to agree on and follow a particular
    [linkage schema](concepts.html#schema) and agree on a shared secret before generating
    and uploading the CLKs.


    ### Security

    See the linked [security documentation](./security.html).


    __Warning__: There are no restrictions on accessing the service, i.e., everyone can call the different endpoints.
    However, authorization is required to access sensitive data. The authorization is described [here](security.html#auth).


    Most endpoints require an authorization header to be sent along with any request.


    ### Generating CLKs

    See the [anonlink-client](https://github.com/data61/anonlink-client) project for details and a command line
    tool to locally generate CLKs from entity data to upload.



    ## Matching Protocols

    The Entity Service supports three different **result types** with varying privacy properties which define the produced result,
    and who may see the which part of the output.

    See the documentation section on [output types](./concepts.html#result-types).

    The options are:

      * `"permutations"` - Creates random permutations and a mask.
      * `"similarity_scores"` - Outputs a list of similarity scores of `[indexA, indexB, score]`, where `score`
        represents the likelihood that `indexA = indexB`.
      * `"groups"` - Outputs a list of groups of records, where each group represents one entity.

    Only `"groups"` supports multi-party linkage. `"permutations"` and `"similarity_scores"` only support linkage
    with two parties.

servers:
- url: https://anonlink.easd.data61.xyz/api/v1
  description: default EASD cluster
- url: http://localhost:8851/api/v1
  description: Local deployment

paths:
  /status:
    get:
      operationId: entityservice.views.general.status_get
      summary: Service status
      tags:
        - General
      description: |
        Suitable for using as load balancer health check. Checks that
        redis cache and database are operational. Provides very high level system wide
        metrics.
      responses:
        '200':
          description: Service status.
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Will be "ok" if everything is working.
                  project_count:
                    description: Number of projects created on this server.
                    type: integer
                  rate:
                    type: integer
                    description: The most recent reported comparison rate of the system (comparisons per second).
              example:
                {
                  "status": "ok",
                  "project_count": 3118,
                  "rate": 1793757
                }
        '500':
          description: |
            System is experiencing difficulties.
            E.g. application can't connect to database.
  /version:
    get:
      operationId: entityservice.views.general.version_get
      summary: Version
      tags:
        - General
      description: |
        Return version numbers of libraries used.
      responses:
        '200':
          description: Versions
          content:
            application/json:
              schema:
                type: object
                properties:
                  anonlink:
                    type: string
                  entityservice:
                    type: string
                  python:
                    type: string
              example:
                {"anonlink": "0.6.3", "entityservice": "v1.7.2", "python": "3.6.4"}
  /projects:
    get:
      operationId: entityservice.views.project.projects_get
      summary: List of record linkage projects.
      tags:
        - Project
      description: |
        List of all privacy preserving record linkage projects.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectList'
    post:
      operationId: entityservice.views.project.projects_post
      summary: Create and configure a new linkage project
      tags:
        - Project
      description: |
        Prepare resources and endpoints to accept CLK uploads from data providers.
        Provides the caller with credentials that will be required for any further
        interaction with this project.

        ### Schema

        Although these comprise the column names, the raw data will never be
        sent to this entity service.

        Each participant will be able to see the schema to verify it is
        what they expect. Schema details should have been determined and agreed
        on by each party before starting a mapping task. This is documented
        in [schema](./concepts.html#schema).

        ### Result Type

        The result type specifies what information is available after the entity
        resolving process has completed. All project **runs** will use this result type.

        The parts of the computed linkage results that are accessable by the different tokens depends on the
        `result_type`:

        - `"similarity_scores"`, or `"groups"`\
        If the `result_type` is `"similarity_scores"` or `"groups"` then the results can be accessed with the
        `result_token``token`, which is provided when initially creating the mapping.

        - `"permutations"`\
        If the `result_type` is `permutations`, then the data providers can access their respective permutation with
        their individual `receipt_token`, which they obtain when adding data to the mapping.
        The mask can be accessed with the `result_token`.

        Only `"groups"` supports multi-party linkage. If the result type is `"similarity_scores"` or
        `"permutations"`, then the number of parties must be 2.

      requestBody:
        description: new project info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewProject'
      responses:
        '201':
          description: New project created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewProjectResponse'
        '400':
          $ref: "#/components/responses/BadRequest"
        '403':
          $ref: '#/components/responses/Unauthorized'
        '503':
          $ref: '#/components/responses/RateLimited'

  '/projects/{project_id}':
    parameters:
      - $ref: '#/components/parameters/token'
      - $ref: '#/components/parameters/project_id'

    get:
      operationId: entityservice.views.project.project_get
      summary: Description of a particular linkage project
      tags:
        - Project
      description: |
        Details provided at project creation.

      responses:
        '200':
          description: Project description
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectDescription'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
        '503':
          $ref: '#/components/responses/RateLimited'

    delete:
      operationId: entityservice.views.project.project_delete
      summary: Delete linkage project.
      tags:
        - Project
      description: Remove the project and all associated data from the service.
      responses:
        '204':
          description: Successfully deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
        '503':
          $ref: '#/components/responses/RateLimited'

  '/projects/{project_id}/authorize-external-upload':
    get:
      operationId: entityservice.views.objectstore.authorize_external_upload
      summary: Upload encoded PII data to a linkage project.
      tags:
        - Project
      description: |
        Returns a set of temporary security credentials that the client can use to upload data to the
        object store.
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/token'
      responses:
        '201':
          description: Temporary Object Store Credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ObjectStoreCredentials'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
        '503':
          $ref: '#/components/responses/RateLimited'

  '/projects/{project_id}/clks':
    post:
      operationId: entityservice.views.project.project_clks_post
      summary: Upload encoded PII data to a linkage project.
      tags:
        - Project
      description: |
        Called by each of the data providers with their calculated `CLK` vectors.
        The project must have been created, and the caller must have both the
        `project_id` and a valid `upload_token` in order to contribute data.

        The data uploaded must be of one of the following formats.
        - CLKs only upload: An array of base64 encoded [CLKs](./concepts.html#cryptographic-longterm-keys), one per
          entity.
        - CLKs with blocking information upload: An array of base64 encoded CLKs with corresponding blocking
          information. One element in this array is an array with the first element being a base64 encoded CLK followed
          by the block IDs the CLK corresponds to.

        When the last party successfully uploads their data any existing project runs are queued
        for execution.

        The uploaded encodings must all have the same length in bytes. If the project's linkage schema
        specifes an encoding size it will be checked and enforced before any runs are computed. Note a
        minimum and maximum encoding size can be set at the server level at deployment time.
        Currently anonlink requires this _encoding size_ to be a multiple of 8. An example value is 128 Bytes.

        Note in the default deployment the maximum request size is set to `~10 GB`, which __should__
        translate to just over 20 million entities.

        ### JSON Upload

        This endpoint can be used with the Content-Type: application/json and uses the `CLKUpload`
        structure of a JSON array of base64 encoded strings.

        ### Binary Upload

        An additional api endpoint (/projects/{project_id}/binaryclks) has been added for uploading CLKs as a binary
        file. This is to allow for faster and more efficient data transfer.

      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/token'
      requestBody:
        description: the encoded PII
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/CLKUpload'
                - $ref: '#/components/schemas/CLKnBlockUpload'
      responses:
        '201':
          description: Data Uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadReceipt'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
        '503':
          $ref: '#/components/responses/RateLimited'

  '/projects/{project_id}/binaryclks':
    post:
      operationId: entityservice.views.project.project_binaryclks_post
      summary: Upload binary encoded PII data to a linkage project.
      tags:
        - Project
      description: |
        An experimental api for uploading CLKs as a binary file. This is to allow for
        faster and more efficient data transfer.
        Called by each of the data providers with their calculated `CLK` vectors.
        The project must have been created, and the caller must have both the
        `project_id` and a valid `upload_token` in order to contribute data.

        When the last party successfully uploads their data any existing project runs are queued
        for execution.

        The uploaded encodings must all have the same length in bytes. If the project's linkage schema
        specifes an encoding size it will be checked and enforced before any runs are computed. Note a
        minimum and maximum encoding size can be set at the server level at deployment time.
        Currently anonlink requires this _encoding size_ to be a multiple of 8. An example value is 128 Bytes.

        Additional headers are required:

          Content-Type: application/octet-stream
          Hash-Count: <number of CLKS>
          Hash-Size: <size of one CLK in bytes>

        The file is a series of CLK data:

            bit_packing_fmt = "!<Hash-Size>s"

        Where:

            "!" Use network byte order (big-endian).
            "<Hash-Size>s" Store the 128 raw bytes of the bitarray. Default value is "128s".

        https://docs.python.org/3/library/struct.html#format-strings

      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/token'
        - in: header
          name: Hash-Count
          required: true
          schema:
            type: integer
        - in: header
          name: Hash-Size
          required: true
          schema:
            type: integer
      requestBody:
        description: the clks in binary
        required: true
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary

      responses:
        '201':
          description: Data Uploaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadReceipt'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
        '503':
          $ref: '#/components/responses/RateLimited'

  '/projects/{project_id}/runs':
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/token'
    get:
      operationId: entityservice.views.run.list.get
      summary: List runs
      tags:
        - Run
      description: |
        List of run summaries.
        Requires project level authorization.

      responses:
        '200':
          description: List of runs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
        '503':
          $ref: '#/components/responses/RateLimited'

    post:
      operationId: entityservice.views.run.list.post
      summary: Create a new run
      tags:
        - Run
      description: |
        Queue up a computation to compare entities.
      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/token'
      requestBody:
        description: shiny new run
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewRun'
      responses:
        '201':
          description: Created new run
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunDescription'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
        '503':
          $ref: '#/components/responses/RateLimited'


  '/projects/{project_id}/runs/{run_id}':
    parameters:
      - $ref: '#/components/parameters/project_id'
      - $ref: '#/components/parameters/run_id'
      - $ref: '#/components/parameters/token'
    get:
      operationId: entityservice.views.run.description.get
      summary: Description of a particular run
      tags:
        - Run
      description: |
        This endpoint allows the caller to see what parameters a run was created with.
        Also see the ``/status`` endpoint.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunDescription'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
        '503':
          $ref: '#/components/responses/RateLimited'

    delete:
      operationId: entityservice.views.run.description.delete
      summary: Delete a run
      tags:
        - Run
      description: Cancel the run and remove all associated data from the service.
      responses:
        '204':
          description: Successfully deleted
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
        '503':
          $ref: '#/components/responses/RateLimited'

  '/projects/{project_id}/runs/{run_id}/status':
    get:
      operationId: entityservice.views.run.status.get
      summary: Run status
      tags:
        - Run
      description: |
        A status update on a particular record linkage run.

        `'time_added'`, `'time_started'` and `'time_completed'` are represented in
        [ISO 8601 format](https://docs.python.org/3/library/datetime.html#datetime.datetime.isoformat).

      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/run_id'
        - $ref: '#/components/parameters/token'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
        '503':
          $ref: '#/components/responses/RateLimited'

  '/projects/{project_id}/runs/{run_id}/result':
    get:
      operationId: entityservice.views.run.results.get
      summary: Run result
      tags:
        - Run
      description: |

        ## Response

        The response schema depends on the mapping's `result_type`. OpenAPI doesn't
        allow different schemas (in v2) so these are documented here:

        Note if the result isn't ready, a `404` will be returned.


        ### result_type = "similarity_scores"

        The list of the pairwise similarity scores where the score
        is greater than the similarity threshold.
        Data is returned as `json` object e.g.,

            {
                "similarity_scores":
                    [
                        [[0, 5], [1, 27], 1.0],
                        [[1, 10], [0, 14], 1.0]
                    ]
            }


        The element in the list is a list of three elements of the following format
        `[[party_id_0, row_index_0], [party_id_1, row_index_1], score]`, where `[party_id_0, row_index_0]`
        refers to the record at the index `row_index_0` from the dataset `party_id_0`, similarly for
        `[party_id_1, row_index_1]`, and `score` is the similarity score representing the likelihood
        that this pair or records is a match.

        `ds_index_0`, `rec_index_0, `ds_index_1` and `rec_index_1` start from 0, and `party_id_0 != party_id_1` but
        are not necessarilly ordered.

        The value of `score` is between 0.0 and 1.0. The higher the score, the higher the similarity between
        the compared CLKs.

        ### result_type = "permutations"

        The data providers will receive their respective permutation:


            {
                "permutation": [3,0,4,1,2],
                "rows": 5
            }


        The creator of the mapping gets access to the mask:

            {
                "mask": [0,1,0,1,1]
            }


        In this example the first three elements in the original dataset are included,
        but have been reordered to the second, fourth and fifth positions. The other elements
        have been excluded with the mask. Note the permutation is specific to
        the caller. Also any data after row 5 is to be discarded after the reordering has
        been applied.
        The mask is an array of 0/1 numbers.

        ### result_type = "groups"

        A list of groups of records, where each group represents one entity. A record is a
        2-tuple of the dataset index and record index within that dataset.

        For example:
        {"groups": [[[0, 6], [1, 3], [3, 1]],
                    [[0, 8], [2, 6]],
                    [[0, 3], [3, 4]]]}

        Here, we have three groups. The first group contains three records and the other two
        groups each contain two records.

        In the first group, [0, 6] is the 7th record of the 1st dataset (because we're using)
        0-indexing. A particular record will appear in at most one group.

        In this example, there are many records that are not matched to any other records (for
        example [0, 5]). These trivial groups are omitted.


      parameters:
        - $ref: '#/components/parameters/project_id'
        - $ref: '#/components/parameters/run_id'
        - $ref: '#/components/parameters/token'
      responses:
        '200':
          description: Successful response
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/Error'
        '503':
          $ref: '#/components/responses/RateLimited'

components:
  parameters:
    token:
      required: true
      schema:
        type: string
      name: Authorization
      in: header
    project_id:
      in: path
      name: "project_id"
      description: Resource identifier of the record linkage project
      required: true
      schema:
        type: string
    run_id:
      in: path
      name: "run_id"
      description: Resource identifier of a particular run in a record linkage project
      required: true
      schema:
        type: string

  # Descriptions of common responses
  responses:
    Error:
      description: An unspecified error occured
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Problem'
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    BadRequest:
      description: Client's request could not be processed.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    Unauthorized:
      description: Authentication token could be missing, or invalid.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Problem"
    RateLimited:
      description: Client is rate limited. Try requesting less frequently.


  schemas:

    Problem:
      type: object
      properties:
        type:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the problem type.  When dereferenced,
            it SHOULD provide human-readable documentation for the problem type
            (e.g., using HTML).
          default: 'about:blank'
          example: 'http://anonlink.readthedocs.io/en/latest/problems.html#ratelimited'
        title:
          type: string
          description: |
            A short, summary of the problem type. Written in english and readable
            for engineers; example: Service Unavailable
        status:
          type: integer
          format: int32
          description: |
            The HTTP status code generated by the origin server for this occurrence
            of the problem.
          minimum: 100
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: |
            A human readable explanation specific to this occurrence of the
            problem.
          example: Connection to database timed out
        instance:
          type: string
          format: uri
          description: |
            An absolute URI that identifies the specific occurrence of the problem.
            It may or may not yield further information if dereferenced.

    ProjectList:
      type: array
      items:
        type: object
        description: Listing of projects.
        properties:
          project_id:
            type: string
          time_added:
            type: string
            description: ISO8601 formated datetime
            format: 'date-time'

    Schema:
      type: object
      description: |
        The `schema` is described in the [clkhash](http://clkhash.readthedocs.io/en/latest/schema.html)
        documentation.

        A json-schema definition can be found [here](http://clkhash.readthedocs.io/en/latest/_static/schema.json#hashing-schema)

    ResultType:
      type: string
      description: |
        Defines the output type of the mapping. Multi-party linkage requires `"groups"` to be used.
      enum:
        - groups
        - permutations
        - similarity_scores

    RunState:
      type: string
      description: What state is the run in
      enum:
        - created
        - queued
        - running
        - completed
        - error

    RunProgress:
      description: Details how far completed the run is.
      type: object
      properties:
        absolute:
          description: The progress of this stage in absolute terms
          type: number
          format: int
          minimum: 0
        description:
          type: string
          description: opportunity to give those numbers some context, what are we counting here?
        relative:
          type: number
          format: double
          minimum: 0.0
          maximum: 1.0
          description: |
            Decimal between 0.0 and 1.0 indicating the relative progress of this stage.
      required:
        - absolute
        - relative

    NewProject:
      description: Configuration for a new linkage project.
      type: object
      x-body-name: project
      properties:
        schema:
          $ref: '#/components/schemas/Schema'
        result_type:
          $ref: '#/components/schemas/ResultType'
        number_parties:
          description: |
            How many data providers will participate in this project. Default value is 2.
            If there are more than two data providers, then `result_type` must be
            `"groups"`.
          type: integer
          minimum: 2
        name:
          description: Any free text name for this project.
          type: string
        notes:
          description: Any free text to store with this project.
          type: string
      required:
        - schema
        - result_type

    ProjectDescription:
      allOf:
        - $ref: '#/components/schemas/NewProject'
        - type: object
          properties:
            project_id:
              type: string
            parties_contributed:
              type: number
            error:
              type: boolean

    NewProjectResponse:
      properties:
        project_id:
          type: string
        update_tokens:
          type: array
          description: Array of unique tokens authorizing the upload of CLKs.
          items:
            type: string
        result_token:
          description: A token required to access mapping results.
          type: string

    NewRun:
      description: Configuration for a new run doing the linkage calculation
      x-body-name: run
      type: object
      properties:
        threshold:
          type: number
          format: double
          description: |
            The similarity threshold (a number between 0 and 1) above which two entites will be considered a match.
        notes:
          type: string
          description: |
            Some optional text that we store along with the run.
        name:
          type: string
          description: |
            Some short human readable name that we store along with the run.

      required:
        - threshold

    RunDescription:
      allOf:
        - $ref: '#/components/schemas/NewRun'
        - type: object
          properties:
            run_id:
              type: string

    RunList:
      type: array
      items:
        type: object
        description: Listing of runs.
        properties:
          run_id:
            type: string
          time_added:
            type: string
            description: ISO8601 formated datetime
            format: 'date-time'
          state:
            $ref: '#/components/schemas/RunState'

    RunStatus:
      type: object
      discriminator:
        propertyName: state
      properties:
        time_added:
          type: string
          format: 'date-time'
        state:
          type: string
          description: What state is the run in
          enum:
            - created
            - queued
            - running
            - completed
            - error
        stages:
          type: number
          format: int
          minimum: 1
          description: total number of stages for this run
        current_stage:
          $ref: '#/components/schemas/RunStage'
      required:
        - time_added
        - state
        - stages
        - current_stage

    completed:
      allOf:
        - $ref: '#/components/schemas/RunStatus'
        - type: object
          properties:
            time_started:
              type: string
              format: 'date-time'
            time_completed:
              type: string
              format: 'date-time'
          required:
            - time_started
            - time_completed

    error:
      description: Describes the errored Run. Must contain a 'message', can provide more detail in 'detail'.
      allOf:
        - $ref: '#/components/schemas/RunStatus'
        - type: object
          properties:
            message:
              type: string
              description: short error message
            detail:
              type: string
              description: detailed error message
          required:
            - message

    queued:
      allOf:
        - $ref: '#/components/schemas/RunStatus'
        - type: object
          properties:
            time_started:
              type: string
              format: 'date-time'

    started:
      allOf:
        - $ref: '#/components/schemas/queued'

    running:
      allOf:
        - $ref: '#/components/schemas/RunStatus'
        - type: object
          properties:
            time_started:
              type: string
              format: 'date-time'
          required:
            - time_started

    RunStage:
      description: describes the current stage of a run
      type: object
      properties:
        number:
          type: number
          minimum: 1
          description: the number of the current stage, first stage has number 1
        description:
          type: string
          description: describes the current stage in human readable form
        progress:
          $ref: '#/components/schemas/RunProgress'
      required:
        - number

    CLKUpload:
      description: Object that contains this party's Bloom Filters
      type: object
      required: [clks]
      properties:
        clks:
          type: array
          items:
            type: string
            format: byte
            description: Base64 encoded CLK data

    CLKnBlockUpload:
      description: Object that contains this party's Bloom Filters including blocking information
      type: object
      required: [clknblocks]
      properties:
        clknblocks:
          type: array
          items:
            type: array
            items:
              anyOf:
                - type: string
                  format: byte
                  description: Base64 encoded CLK data
                - type: string
                - type: integer

    UploadReceipt:
      properties:
        receipt_token:
          type: string
        message:
          type: string

    ObjectStoreCredentials:
      description: Temporary credentials allowing client to upload a file to an object store.
      type: object
      properties:
        upload:
          description: Configuration of object store to upload file/s to.
          type: object
          properties:
            endpoint:
              type: string
              description: Hostname, and port of object store.
            bucket:
              type: string
            path:
              type: string

        credentials:
          description: Object Store credentials (compatible with both AWS & MinIO)
          type: object
          properties:
            AccessKeyId:
              type: string
            SecretAccessKey:
              type: string
            Expiration:
              type: string
            SessionToken:
              type: string
