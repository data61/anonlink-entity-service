# Template to login into Dockerhub, build a docker image and push it.

# Parameters:
# `dockerFilePath` is optional. If provided, will add the
# parameter -f ${{ parameters.dockerFile }} to the docker build command.
# jobName should only include alphanumeric values and '_'.
# extraJobs can contain a list of jobs to do in the same stage which are dependent on the built and pushed docker image.
# imageTag is optional - if not provided templateSetVariableDockerTag will be used.
parameters:
  dockerFilePath: ''
  folder: ''
  imageName: ''
  imageTag: ''
  jobName: ''
  extraJobs: []

jobs:
- job: ${{ parameters.jobName }}
  displayName: ${{ parameters.jobName }}
  pool:
    vmImage: "ubuntu-latest"
  steps:
    - bash: |
        if [ -z "$DOCKER_TAG" ]; then
          echo "Generating default docker tag"
        else
          echo "Using \"${{ parameters.imageTag }}\" as docker tag."
          echo "##vso[task.setvariable variable=DOCKER_TAG]${{ parameters.imageTag }}"
        fi
      env:
        DOCKER_TAG: ${{ parameters.imageTag }}
      displayName: Check for tag parameter
    - ${{ if eq(parameters.imageTag, '') }}:
      - template: templateSetVariableDockerTag.yml   # Set DOCKER_TAG if it wasn't provided in parameters as imageTag
    - bash: |
        echo "Using \"$(DOCKER_TAG)\" as docker tag."
      displayName: Echo docker tag
    - script: |
        docker login -u $(dockerHubId) -p $(dockerHubPassword)
      displayName: 'Dockerhub login'
    - script: |
        if [[ -z "${{ parameters.dockerFilePath }}" ]]; then
          docker build -t ${{ parameters.imageName }}:$(DOCKER_TAG) ${{ parameters.folder }}
        else
          docker build -t ${{ parameters.imageName }}:$(DOCKER_TAG) -f ${{ parameters.dockerFilePath }} ${{ parameters.folder }}
        fi
        docker push ${{ parameters.imageName }}:$(DOCKER_TAG)
      displayName: 'Build and push docker image'

# Updated from the documentation https://docs.microsoft.com/en-us/azure/devops/pipelines/process/templates?view=azure-devops
# The idea being able to define jobs depending on the creation of the previous image.
- ${{ each job in parameters.jobs }}: # Then do each job
  - ${{ each pair in job }}:          # Insert all properties other than "dependsOn"
      ${{ if ne(pair.key, 'dependsOn') }}:
        ${{ pair.key }}: ${{ pair.value }}
    dependsOn:                        # Inject dependency
    - ${{ parameters.jobName }}
    - ${{ if job.dependsOn }}:
      - ${{ job.dependsOn }}
