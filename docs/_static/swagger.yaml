swagger: '2.0'
info:
  version: '1.1'
  title: Entity Matching API
  contact:
    name: 'Confidential Computing, Data61 | CSIRO'
    email: support@n1analytics.com
  description: >-
    Allows two organisations to carry out private record linkage -
    without disclosing personally identifiable information.

    * All parameters and returned objects are JSON with content-type set to
    application/json.

    * All authentication tokens are 48 character hex strings.

    * The resource identifiers are also 48 char hex strings.

    * HTTP status codes are used to distinguish server outcomes.


    ## Introduction

    This is a service that computes record matches between providers. Data to be 
    linked is locally hashed into cryptographic longterm keys (CLKs). This hashed 
    data is uploaded to the service for matching. The result is a permutation, or
    reordering, for each providers' data. Data to be linked must be locally
    transformed into cryptographic longterm keys following a particular schema
    before being uploaded.
    
    ## Matching Protocols
    
    The Entity Service supports different **result types** which effect what output is produced,
    and who may see the output.
    
    ### Direct Mapping Table
    
    This outputs a lookup table using original indices from the two organizations. The
    `result_token` (generated when creating the mapping) is required. The `result_type`
    should be set to `"mapping"`.
    
    
    ### Permutation and Mask
    
    This protocol creates a random reordering for both organizations; and creates a mask revealing
    where the reordered rows line up. Accessing the mask requires the `result_token`, and accessing
    the permutation requires a `receipt-token` (provided to each organization when they upload data).
    
    ### Permutation and Encrypted Mask
    
    Similar to **Permutation and Mask**, except the mask is encrypted using a Paillier Public Key
    given when creating the mapping. The mask is provided along with the unenencrypted permutation
    to each organization with a valid `receipt-token`.



    ## Security

    Full details on the security of the privacy preserving 
    record linkage are available in the paper:
    [A Novel Error-Tolerant Anonymous Linking Code](http://www.record-linkage.de/-download=wp-grlc-2011-02.pdf)
    by Rainer Schnell, Tobias Bachteler, and JÃ¶rg Reiher.
    Essentially this guarantees the privacy of all individual records, however the
    relationship between records is, of course, exposed by this api.
    
    
    __Warning__: anyone can use this service, however only the
    participants in a mapping are allowed to see the results.
    

    ## Identifier Types

    Types of personally identifiable information that can be used to create
    Bloom Filters to compute CLKs. Both sides must agree on the exact schema,
    however due to the one way nature of the CLKs this service can't 
    enforce that the schema was followed.

    See additional documentation for valid identifier types.
    
    ## Hashing Data
    
    See the `anonlink` project for details and a command line tool to locally
    hash the data to upload.
    
host: es.data61.xyz
schemes:
  - https
basePath: /api/v1
produces:
  - application/json
paths:
  /status:
    get:
      description: |
        Check that the service is up and responding. 
        
        Suitable for using as load balancer health check. Checks that
        redis cache and database are operational.
      responses:
        '200':
          description: Service status.
          schema:
            type: object
            properties:
              status:
                type: string
                description: Will be "ok" if everything is working.
              number_mappings:
                type: integer
              rate:
                type: integer
        '500':
          description: | 
            System is experiencing difficulties. 
            E.g. application can't connect to database.
  /version:
    get:
      description: |
        Return version numbers of libraries used.
      responses:
        '200':
          description: Versions
          schema:
            type: object
            properties:
              anonlink:
                type: string
              entityservice:
                type: string
              libc:
                type: string
              python:
                type: string
  /mappings:
    get:
      description: |
        List all mapping jobs.
        
        `'time_added'` and `'time_completed'` are represented in
        [ISO 8601 format](https://docs.python.org/3/library/datetime.html#datetime.datetime.isoformat).
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/mappings'
    post:

      description: |
        Create and configure a new entity matching task.
        
        
        Prepare resources and endpoints to accept updates from data providers.
        Provides the caller with credentials that will be required when adding
        data to the mapping and accessing the results.


        ### Schema
        
        Although these comprise the column names, the raw data will never be
        sent to this entity service. 
        
        
        Each participant will be able to see the schema to verify it is
        what they expect. Schema details should have been determined and agreed 
        on by each party before starting a mapping task.
      
      
            [
              {"identifier": "NAME freetext",  "weight": 1, "notes":""},
              {"identifier": "DOB YYYY/MM/DD", "weight": 1, "notes":""}
            ]
        
        ### Result Type
        
        The result type specifies what information is available after the entity
        resolving process has completed.  See the documentation section on 
        [matching protocols](#matching-protocols).
        
        
          
        The options are:
      
          * `"permutation"` - Create a random permutation and Paillier encrypted mask.
          * `"mapping"` - Directly output a lookup table of `indexA = indexB`
          * `"permutation_unencrypted_mask"` - Create a random permutation and an unencrypted mask.

        
        
        `public_key` and `paillier_context` are only required if `result_type = "permutation"`.
        
        
      parameters:
        - in: body
          name: mapping
          required: true
          schema:
            $ref: '#/definitions/NewMapping'
      responses:
        '200':
          description: Success
          schema:
            $ref: '#/definitions/NewMappingResponse'
 
  '/mapping/{mapping-id}':
    get:
      description: |
        Gets a detailed description of a `Match` object by id.
        The response body for completed matchings depends on the mappings's `result_type`.
        
        
        ## Authentication Token
        
        Token source depends on the mapping's `result_type`.
        
        - if the `result_type` is `"mapping"` then `token` is provided when initially
          creating the mapping (as `result-token`).
        - if the `result_type` is `"permutation"` then `token` is obtained when organisations
          add data to the mapping (as `receipt-token`)
        - if the `result_type` is `permutation_unenecrypted_mask`, the `token` to access the
          mask is provided initially creating the mapping (as `result-token`), and the
          `token` to access the permutation is obtained when organisations add data to the
          mapping (as `receipt-token`)
        
        
        ## Response
        
        The response schema depends on the mapping's `result_type`. OpenAPI doesn't
        allow different schemas so these are documented here.
        
        
        ### result_type = "mapping"

        The mapping of indices between parties. Data is returned as `json` object e.g,
      
            {
                "mapping":
                    {
                        "0": "5",
                        "2": "0"
                    }
            }

        
        ### result_type = "permutation"
        
        The permutation, and mask specific for the calling organisation.
        Data is returned as `json` object e.g,
        
        
            {
                "permutation": [3,0,4,1,2],
                "mask": [0,1,0,1,1],   <-- As paillier encrypted, base64 encoded numbers
                "paillier_context": {
                    "base": 2,
                    "encoded": true
                }
            }
          
        
        In this example the first three elements in the original dataset are included,
        but have been reordered to the second, fourth and fifth positions. The other elements
        have been excluded with the encrypted mask. Note the permutation is specific to
        the caller. Also any data after row 5 is to be discarded after the reordering has
        been applied.
        
        The `mask` is a json array of Paillier encrypted numbers. These are the ciphertexts
        as integer strings. The encoded number base is `2`, and the precision is set to
        `1e3`. The exponent is not serialized, as it will always be 0. The resulting ciphertext
        is serialized with base64 encoding.
        
        In Python using `python-paillier`: `int_to_base64(public_key.encrypt(enc, precision).ciphertext())`
        
        
        ### result_type = "permutation_unencrypted_mask"
        
        The data providers will receive the permutation:
        
            
            {
                "permutation": [3,0,4,1,2],
                "rows": 5
            }
        
        
        The creator of the mapping gets access to the mask:
            
            {
                "mask": [0,1,0,1,1]
            }
            
        
        The mask is an array of 0/1 numbers.

        
      parameters:
        - $ref: '#/parameters/token'
        - $ref: '#/parameters/resource'
        
      responses:
        '401':
          description: Not Authenticated
          schema:
            $ref: '#/definitions/AuthError'
            
        '503':
          description: |
            Mapping is not yet ready. Includes progress report.
          schema:
            $ref: '#/definitions/MappingProgress'
        '200':
          description: Successful response
    put:
      description: |
        Called by each of the data providers with their calculated `CLK` vectors.
        The mapping must have been created, and the caller must have both the
        `mapping-id` and `token` in order to contribute data.
        
        
        When the second party successfully adds data the matching task is queued;
        although it is worth noting there is no indication to the caller that this
        has occurred.
        
        
        One per entity/row.
        Note maximum request size is currently set to `~10 GB`, which __should__
        translate to over 20 million entities.
        
      parameters:
        - $ref: '#/parameters/resource'
        - in: body
          name: clks
          required: true
          schema:
            $ref: '#/definitions/CLKUpload'
      responses:
        '201':
          description: Data Uploaded
          schema:
            $ref: '#/definitions/UploadReceipt'
        '400':
          description: If required information is not provided, or wrong format
        '401':
          description: If the authentication token is not provided
        '403':
          description: If the authentication token is not valid
    
    delete:
      description: Remove the mapping and associated data from the service.
      parameters:
        - $ref: '#/parameters/resource'
      responses:
        '204':
          description: Successfully deleted
        '404':
          description: Mapping not present
  '/mapping/{mapping-id}/status':
    get:
      description: A status update on a particular mapping
      responses:
        '200':
          description: Successful response
          schema:
            $ref: '#/definitions/MappingStatus'
parameters:
  token:
    required: true
    type: string
    name: token
    in: header
  resource:
    in: path
    name: "mapping-id"
    description: Resource identifier of the mapping
    required: true
    type: string

definitions:

  AuthError:
    type: object
    properties:
      message:
        type: string
      
  mappings:
    type: array
    items:
      type: object
      description: Listing information about a mapping.
      properties:
        resource_id:
          type: string
        ready:
          type: boolean
        time_added:
          type: string
          description: ISO8601 formated datetime
          format: 'date-time'
        time_completed:
          type: string
          description: ISO8601 formated datetime
          format: 'date-time'

  MappingStatus:
    properties:
      ready:
        type: boolean
      threshold:
        type: number
      time_added:
        type: string
        format: 'date-time'
      time_started:
        type: string
        format: 'date-time'
      time_completed:
        type: string
        format: 'date-time'

  PaillierPublicKey:
    description: https://python-paillier.readthedocs.io/en/develop/serialisation.html#jwk-serialisation
    type: object
    properties:
      n:
        type: string
      kty:
        type: string
        default: "DAJ"
      kid:
        type: string
      key_ops:
        type: array
        items:
          type: string
      alg:
        type: string
        default: "PAI-GN1"

  PaillierContext:
    description: Information on the Paillier encoding
    type: object
    properties:
      encoded:
        type: boolean
      base:
        type: integer

  FeatureDescription:
    description: Feature description
    properties:
      identifier:
        type: string
      weight:
        type: number
      notes:
        type: string
    
  NewMapping:
    properties:
      schema:
        type: array
        description: The `schema` is an array of feature description
        items:
          $ref: '#/definitions/FeatureDescription'
            
      result_type:
        type: string
        description: Output types and authentication protocol
        enum:
          - permutation
          - mapping
          - permutation_unencrypted_mask

      public_key:
        $ref: "#/definitions/PaillierPublicKey"
        
      paillier_context:
        $ref: "#/definitions/PaillierContext"
      threshold:
        type: number
        format: double
        default: 0.95
        description: "The similarity threshold (a number between 0 and 1) above which two entites will be considered a match."
      
    required:
      - schema
      - result_type
      
  NewMappingResponse:
    properties:
      resource_id:
        type: string
      update_tokens:
        type: array
        description: Array of single use tokens required to upload data.
        items:
          type: string
      result_token:
        description: a token required to access mapping results.
        type: string
  
  MappingProgress:
    properties:
      message:
        type: string
      elapsed:
        description: The number of seconds spent on computing this matching.
        type: number
        format: double
      total:
        description: Number of comparisons required for this Match
        type: number
        format: int
      current:
        type: number
        format: int
        description: How many comparisons have been carried out.
      progress:
        type: number
        description: >-
          Decimal between 0.0 and 1.0 indicating progress. For now equal to
          current/total.
  
  CLKUpload:
    description: Array of this party's Bloom Filters
    type: array
    items:
      type: string
      format: byte
      description: Base64 encoded CLK data
      
  UploadReceipt:
    properties:
      receipt-token:
        type: string
      message:
        type: string
